import sys
import hashlib
import subprocess
import datetime
import paramiko
import json

# Leer el archivo JSON
with open('configVM.json') as f:
    data = json.load(f)

# Obtener la configuración de conexión desde el archivo JSON
nombre_maquina_virtual = data['name']
direccion_ip = data['direccion_ip']
puerto = data['puerto']
usuario = data['usuario']
contrasena = data['contrasena']

# Crear una instancia de cliente SSH
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

# Conectarse por SSH a la máquina virtual
ssh_client.connect(direccion_ip, port=puerto, username=usuario, password=contrasena)

# Ejecutar comandos remotos en la máquina virtual
stdin, stdout, stderr = ssh_client.exec_command('comando_remoto')

# Obtener la salida del comando remoto
output = stdout.read().decode('utf-8')
print(output)
# Ruta del archivo local a enviar
#ruta_archivo_local = 'hash.txt'
#ruta_archivo_local = input('Ingrese el nombre del archivo a analizar: ')

# Ruta del archivo remoto (destino) en la máquina virtual
#ruta_archivo_remoto = '/home/kary/Escritorio/prueba.txt'
# Crear un canal SFTP para la transferencia de archivos
#sftp = ssh_client.open_sftp()
# Enviar el archivo local al servidor remoto
#sftp.put(ruta_archivo_local, ruta_archivo_remoto)

def calcular_md5(programa, nombre_analisis):
    with open(programa, 'rb') as archivo:
        contenido = archivo.read()
        hash_md5 = hashlib.md5(contenido).hexdigest()
        
        with open(nombre_analisis, 'w') as archivo_salida:
            archivo_salida.write(f"MD5: {hash_md5}\n")
            
            
def calcular_sha1(programa, nombre_analisis):
    with open(programa, 'rb') as archivo:
        contenido = archivo.read()
        hash_sha1 = hashlib.sha1(contenido).hexdigest()
        
        with open(nombre_analisis, 'w') as archivo_salida:
            archivo_salida.write(f"SHA1: {hash_sha1}\n")

def calcular_sha256(programa, nombre_analisis):
    with open(programa, 'rb') as archivo:
        contenido = archivo.read()
        hash_sha256 = hashlib.sha256(contenido).hexdigest()
        
        with open(nombre_analisis, 'w') as archivo_salida:
            archivo_salida.write(f"SHA256: {hash_sha256}\n")

def ejecutar_comando(programa, comando, nombre_analisis):
    try:
        salida = subprocess.run([comando, programa], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        if salida.returncode == 0:
            with open(nombre_analisis, 'w') as archivo_salida:
                archivo_salida.write(salida.stdout.decode())
            print(f"Análisis '{comando}' completado. Los resultados se guardaron en '{nombre_analisis}'.")
        else:
            print(f"Se produjo un error durante el análisis '{comando}'.")
            print("Mensaje de error:", salida.stderr.decode())
    except FileNotFoundError:
        print(f"No se pudo encontrar el comando '{comando}'.")
        
def analisis(programa, tipo_analisis):
    fecha_actual = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    nombre_analisis = f'{tipo_analisis}_{fecha_actual}.txt'
    
    
    if tipo_analisis == 'md5':
        calcular_md5(programa, nombre_analisis)
    elif tipo_analisis == 'sha1':
        calcular_sha1(programa, nombre_analisis)
    elif tipo_analisis == 'sha256':
        calcular_sha256(programa, nombre_analisis)
    elif tipo_analisis in ['file', 'exiftool', 'strings', 'hexdump', 'librerias', 'headers', 'asm', 'OPCODEs', 'ssdeep', 'Ngrams']:
        ejecutar_comando(programa, tipo_analisis, nombre_analisis)
    else:
        print(f"El análisis '{tipo_analisis}' no está permitido.")

# Ruta del archivo local a enviar
ruta_archivo_local = 'hash.txt'
#ruta_archivo_local = input('Ingrese el nombre del archivo a analizar: ')

# Ruta del archivo remoto (destino) en la máquina virtual
#ruta_archivo_remoto = '/home/kary/Escritorio/prueba.txt'
# Crear un canal SFTP para la transferencia de archivos
#sftp = ssh_client.open_sftp()
# Enviar el archivo local al servidor remoto
#sftp.put(ruta_archivo_local, ruta_archivo_remoto)

#sftp.put(nombre_analisis, ruta_archivo_remoto)
# Cerrar la conexión SFTP y SSH

# Cerrar la conexión SSH
ssh_client.close()
# Obtener los argumentos pasados al programa
"""""
if len(sys.argv) == 3:
    programa = sys.argv[1]
    tipo_analisis = sys.argv[2]

    analisis(programa, tipo_analisis)
else:
    print("Uso incorrecto del programa.")
    print("Debe proporcionar la dirección de un programa y el tipo de análisis estático a ejecutar.")

"""